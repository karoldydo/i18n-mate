---
description: Best practices for OpenRouter.ai integration
globs: src/shared/api/openrouter*.ts,src/features/*/api/*translate*.ts,src/features/*/api/*ai*.ts
alwaysApply: false
---

# OpenRouter.ai Integration

## API Client Setup

- Store OpenRouter client instance in `src/shared/api/openrouter.client.ts`
- Use environment variables for API keys and model name via `src/shared/config`
- Never hardcode API keys or expose them in client-side code
- Set appropriate request headers: `Authorization`, `Content-Type`, and optional `HTTP-Referer`

## Error Handling

- Check HTTP status before processing responses: 400 (Bad Request), 401 (Unauthorized), 402 (Payment Required), 429 (Rate Limited), 502 (Bad Gateway), 503 (Service Unavailable)
- Handle errors at the beginning of functions with early returns
- Use TypeScript interface for error responses: `ErrorResponse`
- Display user-friendly toast messages for errors (see PRD 3.5, US-080)

## Request Configuration

- Always use `stream: false` parameter for all OpenRouter API calls
- Use TanStack Query mutations (useMutation) for translation operations
- Configure basic retry for transient errors: `retry: 2`
- Store model name in environment variables

## Model Configuration

- Store model name in `src/shared/config` from environment variables
- Use single model for all translation operations
